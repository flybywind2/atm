/**
 * Document Viewer Component
 * 
 * This component displays the final analysis results including generated documents,
 * with support for multiple document types and export functionality.
 */

class DocumentViewerComponent {
    constructor(containerId) {
        this.container = document.getElementById(containerId);
        this.documents = {};
        this.currentDocument = null;
        this.solutionInfo = {};
        
        this.render();
        this.setupEventListeners();
    }
    
    /**
     * Render the component HTML
     */
    render() {\n        this.container.innerHTML = `\n            <div class=\"document-viewer\">\n                <div class=\"results-header\">\n                    <div class=\"completion-status\">\n                        <span class=\"status-icon\">✅</span>\n                        <h3>분석 완료!</h3>\n                        <p>문제 분석이 성공적으로 완료되었습니다. 아래에서 결과를 확인하세요.</p>\n                    </div>\n                    \n                    <div id=\"solution-summary\" class=\"solution-summary hidden\">\n                        <div class=\"summary-item\">\n                            <label>솔루션 유형:</label>\n                            <span id=\"solution-type\">-</span>\n                        </div>\n                        <div class=\"summary-item\">\n                            <label>추천 기술 스택:</label>\n                            <div id=\"tech-stack\" class=\"tech-stack\"></div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class=\"document-tabs\">\n                    <button class=\"tab-button active\" data-doc=\"requirements\">\n                        📋 요구사항 명세서\n                    </button>\n                    <button class=\"tab-button\" data-doc=\"journey\">\n                        🗺️ 사용자 여정 지도\n                    </button>\n                    <button class=\"tab-button\" data-doc=\"guide\">\n                        📚 구현 가이드\n                    </button>\n                    <button class=\"tab-button\" data-doc=\"tech\">\n                        🔧 기술 추천서\n                    </button>\n                </div>\n                \n                <div class=\"document-content-container\">\n                    <div id=\"document-content\" class=\"document-content\">\n                        <div class=\"loading-state\">\n                            <p>문서를 불러오는 중...</p>\n                        </div>\n                    </div>\n                    \n                    <div class=\"document-actions\">\n                        <button type=\"button\" class=\"btn btn-primary\" id=\"download-btn\">\n                            📥 다운로드\n                        </button>\n                        \n                        <button type=\"button\" class=\"btn btn-outline\" id=\"copy-btn\">\n                            📋 복사\n                        </button>\n                        \n                        <button type=\"button\" class=\"btn btn-outline\" id=\"print-btn\">\n                            🖨️ 인쇄\n                        </button>\n                        \n                        <div class=\"action-group\">\n                            <button type=\"button\" class=\"btn btn-outline\" id=\"download-all-btn\">\n                                📦 전체 다운로드\n                            </button>\n                            \n                            <button type=\"button\" class=\"btn btn-outline\" id=\"new-analysis-btn\">\n                                🔄 새 분석 시작\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                \n                <div id=\"export-options\" class=\"export-options hidden\">\n                    <h4>내보내기 옵션</h4>\n                    <div class=\"export-formats\">\n                        <button class=\"format-btn\" data-format=\"markdown\">\n                            📝 Markdown (.md)\n                        </button>\n                        <button class=\"format-btn\" data-format=\"html\">\n                            🌐 HTML (.html)\n                        </button>\n                        <button class=\"format-btn\" data-format=\"pdf\">\n                            📄 PDF (.pdf)\n                        </button>\n                        <button class=\"format-btn\" data-format=\"txt\">\n                            📃 텍스트 (.txt)\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n    \n    /**\n     * Setup event listeners\n     */\n    setupEventListeners() {\n        const tabButtons = this.container.querySelectorAll('.tab-button');\n        const downloadBtn = this.container.querySelector('#download-btn');\n        const copyBtn = this.container.querySelector('#copy-btn');\n        const printBtn = this.container.querySelector('#print-btn');\n        const downloadAllBtn = this.container.querySelector('#download-all-btn');\n        const newAnalysisBtn = this.container.querySelector('#new-analysis-btn');\n        const formatButtons = this.container.querySelectorAll('.format-btn');\n        \n        // Tab switching\n        tabButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                const docType = button.dataset.doc;\n                this.switchDocument(docType);\n                \n                // Update active tab\n                tabButtons.forEach(btn => btn.classList.remove('active'));\n                button.classList.add('active');\n            });\n        });\n        \n        // Document actions\n        downloadBtn.addEventListener('click', () => this.downloadCurrentDocument());\n        copyBtn.addEventListener('click', () => this.copyCurrentDocument());\n        printBtn.addEventListener('click', () => this.printCurrentDocument());\n        downloadAllBtn.addEventListener('click', () => this.downloadAllDocuments());\n        newAnalysisBtn.addEventListener('click', () => this.startNewAnalysis());\n        \n        // Export format selection\n        formatButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                const format = button.dataset.format;\n                this.exportCurrentDocument(format);\n            });\n        });\n    }\n    \n    /**\n     * Display analysis results\n     */\n    displayResults(results) {\n        this.documents = results.documents || {};\n        this.solutionInfo = {\n            type: results.solution_type,\n            techStack: results.tech_stack || []\n        };\n        \n        // Update solution summary\n        this.updateSolutionSummary();\n        \n        // Display first document\n        this.switchDocument('requirements');\n    }\n    \n    /**\n     * Update solution summary section\n     */\n    updateSolutionSummary() {\n        const summaryElement = this.container.querySelector('#solution-summary');\n        const solutionTypeElement = this.container.querySelector('#solution-type');\n        const techStackElement = this.container.querySelector('#tech-stack');\n        \n        if (this.solutionInfo.type) {\n            solutionTypeElement.textContent = this.getSolutionTypeLabel(this.solutionInfo.type);\n            \n            if (this.solutionInfo.techStack && this.solutionInfo.techStack.length > 0) {\n                techStackElement.innerHTML = this.solutionInfo.techStack\n                    .map(tech => `<span class=\"tech-tag\">${tech}</span>`)\n                    .join('');\n            } else {\n                techStackElement.textContent = '정보 없음';\n            }\n            \n            summaryElement.classList.remove('hidden');\n        }\n    }\n    \n    /**\n     * Get human-readable solution type label\n     */\n    getSolutionTypeLabel(type) {\n        const labels = {\n            'SIMPLE_AUTOMATION': '기본 자동화',\n            'COMPLEX_AUTOMATION': '고급 자동화',\n            'RAG': '검색 증강 생성',\n            'ADVANCED_RAG': '고급 RAG',\n            'ML_CLASSIFICATION': '머신러닝 분류',\n            'DASHBOARD': '대시보드',\n            'API_INTEGRATION': 'API 통합',\n            'RAG_AUTOMATION': 'RAG + 자동화',\n            'AUTOMATION_DASHBOARD': '자동화 + 대시보드',\n            'ML_RAG': '머신러닝 + RAG'\n        };\n        \n        return labels[type] || type;\n    }\n    \n    /**\n     * Switch to a different document\n     */\n    switchDocument(docType) {\n        this.currentDocument = docType;\n        \n        const contentElement = this.container.querySelector('#document-content');\n        \n        const documentMap = {\n            'requirements': 'requirements_document',\n            'journey': 'user_journey_map', \n            'guide': 'implementation_guide',\n            'tech': 'tech_recommendations'\n        };\n        \n        const documentKey = documentMap[docType];\n        const documentContent = this.documents[documentKey];\n        \n        if (documentContent) {\n            // Render markdown content\n            const htmlContent = window.MarkdownRenderer.renderWithContainer(\n                documentContent, \n                'markdown-content'\n            );\n            contentElement.innerHTML = htmlContent;\n            \n            // Initialize syntax highlighting if available\n            if (window.hljs) {\n                contentElement.querySelectorAll('pre code').forEach(block => {\n                    window.hljs.highlightElement(block);\n                });\n            }\n        } else {\n            contentElement.innerHTML = `\n                <div class=\"no-content\">\n                    <p>⚠️ 이 문서는 아직 생성되지 않았습니다.</p>\n                    <p>분석이 완료되지 않았거나 오류가 발생했을 수 있습니다.</p>\n                </div>\n            `;\n        }\n        \n        // Scroll to top\n        contentElement.scrollTop = 0;\n    }\n    \n    /**\n     * Download current document\n     */\n    downloadCurrentDocument() {\n        if (!this.currentDocument) return;\n        \n        const documentMap = {\n            'requirements': { key: 'requirements_document', filename: '요구사항_명세서.md' },\n            'journey': { key: 'user_journey_map', filename: '사용자_여정_지도.md' },\n            'guide': { key: 'implementation_guide', filename: '구현_가이드.md' },\n            'tech': { key: 'tech_recommendations', filename: '기술_추천서.md' }\n        };\n        \n        const docInfo = documentMap[this.currentDocument];\n        const content = this.documents[docInfo.key];\n        \n        if (content) {\n            window.MarkdownRenderer.createDownloadableContent(content, docInfo.filename);\n        }\n    }\n    \n    /**\n     * Copy current document to clipboard\n     */\n    async copyCurrentDocument() {\n        if (!this.currentDocument) return;\n        \n        const documentMap = {\n            'requirements': 'requirements_document',\n            'journey': 'user_journey_map',\n            'guide': 'implementation_guide', \n            'tech': 'tech_recommendations'\n        };\n        \n        const documentKey = documentMap[this.currentDocument];\n        const content = this.documents[documentKey];\n        \n        if (content) {\n            const success = await window.MarkdownRenderer.copyToClipboard(content);\n            \n            if (success) {\n                this.showToast('문서가 클립보드에 복사되었습니다!', 'success');\n            } else {\n                this.showToast('복사에 실패했습니다. 브라우저가 지원하지 않을 수 있습니다.', 'error');\n            }\n        }\n    }\n    \n    /**\n     * Print current document\n     */\n    printCurrentDocument() {\n        const contentElement = this.container.querySelector('#document-content');\n        const content = contentElement.innerHTML;\n        \n        const printWindow = window.open('', '_blank');\n        printWindow.document.write(`\n            <!DOCTYPE html>\n            <html>\n            <head>\n                <title>분석 결과 - ${this.getDocumentTitle()}</title>\n                <style>\n                    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; }\n                    .markdown-content { max-width: none; }\n                    pre { background: #f5f5f5; padding: 1rem; border-radius: 4px; }\n                    code { background: #f0f0f0; padding: 0.2rem 0.4rem; border-radius: 2px; }\n                    table { border-collapse: collapse; width: 100%; }\n                    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n                    th { background-color: #f2f2f2; }\n                </style>\n            </head>\n            <body>\n                ${content}\n            </body>\n            </html>\n        `);\n        printWindow.document.close();\n        printWindow.print();\n    }\n    \n    /**\n     * Download all documents as a ZIP file\n     */\n    downloadAllDocuments() {\n        // This would require a ZIP library or server-side support\n        // For now, download documents individually\n        Object.keys(this.documents).forEach((key, index) => {\n            setTimeout(() => {\n                const docType = this.getDocTypeFromKey(key);\n                if (docType) {\n                    this.currentDocument = docType;\n                    this.downloadCurrentDocument();\n                }\n            }, index * 500); // Stagger downloads\n        });\n        \n        this.showToast('모든 문서 다운로드를 시작합니다.', 'info');\n    }\n    \n    /**\n     * Get document type from key\n     */\n    getDocTypeFromKey(key) {\n        const mapping = {\n            'requirements_document': 'requirements',\n            'user_journey_map': 'journey',\n            'implementation_guide': 'guide',\n            'tech_recommendations': 'tech'\n        };\n        return mapping[key];\n    }\n    \n    /**\n     * Export current document in specified format\n     */\n    exportCurrentDocument(format) {\n        if (!this.currentDocument) return;\n        \n        const documentMap = {\n            'requirements': 'requirements_document',\n            'journey': 'user_journey_map',\n            'guide': 'implementation_guide',\n            'tech': 'tech_recommendations'\n        };\n        \n        const documentKey = documentMap[this.currentDocument];\n        const content = this.documents[documentKey];\n        \n        if (!content) return;\n        \n        const filename = this.getDocumentTitle();\n        \n        switch (format) {\n            case 'markdown':\n                window.MarkdownRenderer.createDownloadableContent(content, `${filename}.md`);\n                break;\n            case 'html':\n                const htmlContent = window.MarkdownRenderer.render(content);\n                const blob = new Blob([`<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><title>${filename}</title></head><body>${htmlContent}</body></html>`], { type: 'text/html' });\n                this.downloadBlob(blob, `${filename}.html`);\n                break;\n            case 'txt':\n                const textContent = window.MarkdownRenderer.extractText(content);\n                const textBlob = new Blob([textContent], { type: 'text/plain' });\n                this.downloadBlob(textBlob, `${filename}.txt`);\n                break;\n            case 'pdf':\n                this.showToast('PDF 내보내기는 아직 지원되지 않습니다.', 'warning');\n                break;\n        }\n    }\n    \n    /**\n     * Download blob as file\n     */\n    downloadBlob(blob, filename) {\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = filename;\n        link.style.display = 'none';\n        \n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n        URL.revokeObjectURL(url);\n    }\n    \n    /**\n     * Get current document title\n     */\n    getDocumentTitle() {\n        const titles = {\n            'requirements': '요구사항_명세서',\n            'journey': '사용자_여정_지도',\n            'guide': '구현_가이드',\n            'tech': '기술_추천서'\n        };\n        \n        return titles[this.currentDocument] || '문서';\n    }\n    \n    /**\n     * Start new analysis\n     */\n    startNewAnalysis() {\n        if (confirm('새로운 분석을 시작하면 현재 결과가 사라집니다. 계속하시겠습니까?')) {\n            // Reset application state\n            if (window.ProblemSolvingApp) {\n                window.ProblemSolvingApp.reset();\n            }\n        }\n    }\n    \n    /**\n     * Show toast notification\n     */\n    showToast(message, type = 'info') {\n        // Create toast element\n        const toast = document.createElement('div');\n        toast.className = `toast toast-${type}`;\n        toast.textContent = message;\n        \n        // Style the toast\n        toast.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};\n            color: white;\n            padding: 12px 16px;\n            border-radius: 8px;\n            z-index: 1000;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            opacity: 0;\n            transition: opacity 0.3s ease;\n        `;\n        \n        document.body.appendChild(toast);\n        \n        // Show toast\n        setTimeout(() => {\n            toast.style.opacity = '1';\n        }, 100);\n        \n        // Hide toast\n        setTimeout(() => {\n            toast.style.opacity = '0';\n            setTimeout(() => {\n                if (document.body.contains(toast)) {\n                    document.body.removeChild(toast);\n                }\n            }, 300);\n        }, 3000);\n    }\n    \n    /**\n     * Reset component\n     */\n    reset() {\n        this.documents = {};\n        this.currentDocument = null;\n        this.solutionInfo = {};\n        \n        // Reset to initial state\n        this.render();\n        this.setupEventListeners();\n    }\n}\n\n// Export for global use\nwindow.DocumentViewerComponent = DocumentViewerComponent;\n\n// Export for Node.js if needed\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = DocumentViewerComponent;\n}