/**
 * Progress Tracker Component
 * 
 * This component displays the real-time progress of the analysis workflow,
 * showing current status, progress percentage, and step information.
 */

class ProgressTrackerComponent {
    constructor(containerId) {
        this.container = document.getElementById(containerId);
        this.currentStatus = null;
        
        if (!this.container) {
            throw new Error(`Container with ID '${containerId}' not found`);
        }
        
        this.render();
        this.bindEvents();
    }
    
    /**
     * Render the initial component HTML
     */
    render() {
        this.container.innerHTML = `
            <div class="progress-tracker">
                <div class="progress-header">
                    <h3>분석 진행 상황</h3>
                    <div id="thread-info" class="thread-info hidden">
                        <span class="thread-label">Thread ID:</span>
                        <span id="thread-id" class="thread-id">-</span>
                    </div>
                </div>
                
                <div class="progress-bar-container">
                    <div class="progress-bar">
                        <div id="progress-fill" class="progress-fill"></div>
                    </div>
                    <div id="progress-text" class="progress-text">0% 완료</div>
                </div>
                
                <div id="status-indicator" class="status-indicator">
                    <span class="status-icon">⏸️</span>
                    <span id="status-text" class="status-text">대기 중</span>
                </div>
                
                <div class="workflow-steps">
                    <div class="step-item" data-step="analyze">
                        <span class="step-number">1</span>
                        <span class="step-label">문제 분석</span>
                        <span class="step-status">⏸️</span>
                    </div>
                    <div class="step-item" data-step="context">
                        <span class="step-number">2</span>
                        <span class="step-label">컨텍스트 수집</span>
                        <span class="step-status">⏸️</span>
                    </div>
                    <div class="step-item" data-step="requirements">
                        <span class="step-number">3</span>
                        <span class="step-label">요구사항 정의</span>
                        <span class="step-status">⏸️</span>
                    </div>
                    <div class="step-item" data-step="solution">
                        <span class="step-number">4</span>
                        <span class="step-label">솔루션 설계</span>
                        <span class="step-status">⏸️</span>
                    </div>
                    <div class="step-item" data-step="guide">
                        <span class="step-number">5</span>
                        <span class="step-label">가이드 생성</span>
                        <span class="step-status">⏸️</span>
                    </div>
                </div>
                
                <div id="current-message" class="current-message hidden">
                    <span class="message-icon">💬</span>
                    <span id="message-text" class="message-text"></span>
                </div>
                
                <div class="progress-actions">
                    <button id="refresh-btn" class="btn btn-secondary">상태 새로고침</button>
                    <button id="cancel-btn" class="btn btn-danger">작업 취소</button>
                </div>
            </div>
        `;
    }
    
    /**
     * Bind event handlers
     */
    bindEvents() {
        const refreshBtn = this.container.querySelector('#refresh-btn');
        const cancelBtn = this.container.querySelector('#cancel-btn');
        
        refreshBtn.addEventListener('click', () => this.requestStatusUpdate());
        cancelBtn.addEventListener('click', () => this.cancelWorkflow());
    }
    
    /**
     * Update status from API response
     */
    updateStatus(status) {
        this.currentStatus = status;

        // DEBUG: Log status updates
        console.log(`[PROGRESS TRACKER] Received status update:`, {
            step: status.current_step,
            progress: status.progress_percentage,
            status: status.status,
            message: status.message
        });
        
        // Update thread ID
        const threadIdElement = this.container.querySelector('#thread-id');
        const threadInfoElement = this.container.querySelector('#thread-info');
        if (status.thread_id) {
            threadIdElement.textContent = status.thread_id;
            threadInfoElement.classList.remove('hidden');
        }
        
        // Update progress bar
        this.updateProgress(status.progress_percentage);
        
        // Update status indicator
        this.updateStatusIndicator(status.status, status.current_step);
        
        // Update workflow steps
        this.updateWorkflowSteps(status.current_step, status.status);
        
        // Update message
        this.updateMessage(status.message, status.requires_input);
        
        // Update timestamp
        this.updateLastUpdated();
    }
    
    /**
     * Update progress bar
     */
    updateProgress(percentage) {
        const progressFill = this.container.querySelector('#progress-fill');
        const progressText = this.container.querySelector('#progress-text');
        
        const safePercentage = Math.max(0, Math.min(100, percentage || 0));
        
        progressFill.style.width = `${safePercentage}%`;
        progressText.textContent = `${safePercentage}% 완료`;
        
        // Add animation
        progressFill.style.transition = 'width 0.5s ease-in-out';
    }
    
    /**
     * Update status indicator
     */
    updateStatusIndicator(status, currentStep) {
        const statusIndicator = this.container.querySelector('#status-indicator');
        const statusText = this.container.querySelector('#status-text');
        const statusIcon = statusIndicator.querySelector('.status-icon');
        
        // Remove all status classes
        statusIndicator.classList.remove('processing', 'completed', 'error', 'paused');
        
        const statusConfig = {
            'STARTING': { class: 'processing', icon: '🚀', text: '분석 시작됨' },
            'ANALYZING': { class: 'processing', icon: '🔍', text: '문제 분석 중' },
            'COLLECTING_CONTEXT': { class: 'processing', icon: '📝', text: '컨텍스트 수집 중' },
            'GENERATING_REQUIREMENTS': { class: 'processing', icon: '📋', text: '요구사항 생성 중' },
            'DESIGNING_SOLUTION': { class: 'processing', icon: '🎯', text: '솔루션 설계 중' },
            'CREATING_GUIDE': { class: 'processing', icon: '📚', text: '가이드 생성 중' },
            'PROCESSING': { class: 'processing', icon: '⚙️', text: '처리 중' },
            'FALLBACK_GENERATION': { class: 'processing', icon: '🔧', text: '폴백 문서 생성 중' },
            'COMPLETED': { class: 'completed', icon: '✅', text: '분석 완료' },
            'AWAITING_INPUT': { class: 'paused', icon: '⏸️', text: '사용자 입력 대기' },
            'ERROR': { class: 'error', icon: '❌', text: '오류 발생' },
            // Fallback for lowercase versions
            'started': { class: 'processing', icon: '🚀', text: '분석 시작됨' },
            'analyzing': { class: 'processing', icon: '🔍', text: '문제 분석 중' },
            'collecting_context': { class: 'processing', icon: '📝', text: '컨텍스트 수집 중' },
            'generating_requirements': { class: 'processing', icon: '📋', text: '요구사항 생성 중' },
            'designing_solution': { class: 'processing', icon: '🎯', text: '솔루션 설계 중' },
            'creating_guide': { class: 'processing', icon: '📚', text: '가이드 생성 중' },
            'processing': { class: 'processing', icon: '⚙️', text: '처리 중' },
            'fallback_generation': { class: 'processing', icon: '🔧', text: '폴백 문서 생성 중' },
            'completed': { class: 'completed', icon: '✅', text: '분석 완료' },
            'paused': { class: 'paused', icon: '⏸️', text: '사용자 입력 대기' },
            'error': { class: 'error', icon: '❌', text: '오류 발생' }
        };
        
        const statusKey = ((status || '') === 'awaiting_input' || (String(status || '').toLowerCase() === 'awaiting_input')) ? 'paused' : status;
        const config = statusConfig[statusKey] || statusConfig['started'];
        
        statusIndicator.classList.add(config.class);
        statusIcon.textContent = config.icon;
        statusText.textContent = config.text;

        // 처리 중 상태일 때 아이콘에 애니메이션 추가
        if (config.class === 'processing') {
            statusIcon.classList.add('spinning');
        } else {
            statusIcon.classList.remove('spinning');
        }
    }
    
    /**
     * Update workflow steps
     */
    updateWorkflowSteps(currentStep, status) {
        const stepItems = this.container.querySelectorAll('.step-item');
        const normalizedStatus = String(status || '').toLowerCase();
        const stepMapping = {
            'analyze_problem': 'analyze',
            'problem_analyzed': 'analyze',
            'collect_context': 'context',
            'collecting_context': 'context',
            'context_collected': 'context',
            'generate_requirements': 'requirements',
            'requirements_generated': 'requirements',
            'design_solution': 'solution',
            'solution_designed': 'solution',
            'create_guide': 'guide',
            'guide_created': 'guide'
        };
        
        stepItems.forEach(item => {
            const stepType = item.dataset.step;
            const statusElement = item.querySelector('.step-status');
            
            // Reset classes
            item.classList.remove('active', 'completed', 'error');
            
            // Determine step status
            if (stepMapping[currentStep] === stepType) {
                if (normalizedStatus === 'error') {
                    item.classList.add('error');
                    statusElement.textContent = '❌';
                } else if (normalizedStatus === 'paused' || normalizedStatus === 'awaiting_input') {
                    item.classList.add('active');
                    statusElement.textContent = '⏸️';
                } else {
                    item.classList.add('active');
                    statusElement.textContent = '⚙️';
                    statusElement.classList.add('spinning');
                }
            } else {
                // Check if step is completed
                const stepOrder = ['analyze', 'context', 'requirements', 'solution', 'guide'];
                const currentIndex = stepOrder.indexOf(stepMapping[currentStep]);
                const stepIndex = stepOrder.indexOf(stepType);

                if (stepIndex < currentIndex || normalizedStatus === 'completed') {
                    item.classList.add('completed');
                    statusElement.textContent = '✅';
                    statusElement.classList.remove('spinning');
                } else {
                    statusElement.textContent = '⏸️';
                    statusElement.classList.remove('spinning');
                }
            }
        });
    }
    
    /**
     * Update current message
     */
    updateMessage(message, requiresInput) {
        const messageContainer = this.container.querySelector('#current-message');
        const messageText = this.container.querySelector('#message-text');
        const messageIcon = messageContainer.querySelector('.message-icon');
        
        if (message) {
            messageText.textContent = message;
            messageIcon.textContent = requiresInput ? '❓' : '💬';
            messageContainer.classList.remove('hidden');
            
            if (requiresInput) {
                messageContainer.classList.add('requires-input');
            } else {
                messageContainer.classList.remove('requires-input');
            }
        } else {
            messageContainer.classList.add('hidden');
        }
    }
    
    /**
     * Update last updated timestamp
     */
    updateLastUpdated() {
        let timestampElement = this.container.querySelector('#last-updated');
        
        if (!timestampElement) {
            timestampElement = document.createElement('div');
            timestampElement.id = 'last-updated';
            timestampElement.className = 'last-updated';
            this.container.appendChild(timestampElement);
        }
        
        const now = new Date();
        const timeString = now.toLocaleTimeString('ko-KR');
        timestampElement.textContent = `마지막 업데이트: ${timeString}`;
    }
    
    /**
     * Request status update (for manual refresh)
     */
    requestStatusUpdate() {
        console.log('Manual status update requested');
        
        const refreshBtn = this.container.querySelector('#refresh-btn');
        refreshBtn.disabled = true;
        refreshBtn.textContent = '새로고침 중...';
        
        setTimeout(() => {
            refreshBtn.disabled = false;
            refreshBtn.textContent = '상태 새로고침';
        }, 2000);
    }
    
    /**
     * Cancel workflow
     */
    cancelWorkflow() {
        if (confirm('정말로 작업을 취소하시겠습니까?')) {
            console.log('Workflow cancellation requested');
        }
    }
    
    /**
     * Reset component
     */
    reset() {
        this.currentStatus = null;
        
        // Reset progress
        this.updateProgress(0);
        
        // Reset status
        this.updateStatusIndicator('started', '');
        
        // Reset steps
        const stepItems = this.container.querySelectorAll('.step-item');
        stepItems.forEach(item => {
            item.classList.remove('active', 'completed', 'error');
            const statusElement = item.querySelector('.step-status');
            statusElement.textContent = '⏸️';
        });
        
        // Hide message
        this.container.querySelector('#current-message').classList.add('hidden');
        
        // Hide thread info
        this.container.querySelector('#thread-info').classList.add('hidden');
        
        // Remove timestamp
        const timestampElement = this.container.querySelector('#last-updated');
        if (timestampElement) {
            timestampElement.remove();
        }
    }
    
    /**
     * Set thread ID for tracking
     */
    setThreadId(threadId) {
        this.threadId = threadId;

        // Update thread ID display
        const threadIdElement = this.container.querySelector('#thread-id');
        const threadInfoElement = this.container.querySelector('#thread-info');
        if (threadId) {
            threadIdElement.textContent = threadId;
            threadInfoElement.classList.remove('hidden');
        }

        // Initialize with processing state
        this.updateProgress(5);  // Start at 5% to show initial activity
        this.updateStatusIndicator('STARTING', 'analyze_problem');
        this.updateMessage('분석 시작 중...', false);
    }
    
    /**
     * Get current status
     */
    getCurrentStatus() {
        return this.currentStatus;
    }
}

// Export for global use
window.ProgressTrackerComponent = ProgressTrackerComponent;

